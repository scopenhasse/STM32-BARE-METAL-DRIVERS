
1_GPIO_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001046c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000558  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000240  00000000  00000000  000109f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001013  00000000  00000000  00010d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000008e8  00000000  00000000  00011d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003eb1  00000000  00000000  000125fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000164ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e4  00000000  00000000  000164fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800044c 	.word	0x0800044c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800044c 	.word	0x0800044c

080001d4 <InitGPIOx>:
 *  @file : GPIO_DRIVER.c
 * 	@brief :source file for the driver
 */
#include "GPIO_DRIVER.h"

void InitGPIOx(GPIOxTypeDef* gpio, uint8_t pin, enum GPIOx_MODE mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
 80001e0:	4613      	mov	r3, r2
 80001e2:	70bb      	strb	r3, [r7, #2]

	if(gpio == GPIOA){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80001ea:	d142      	bne.n	8000272 <InitGPIOx+0x9e>
		RCC->RCC_AHBEN_R |= GPIOAEN;
 80001ec:	4b43      	ldr	r3, [pc, #268]	; (80002fc <InitGPIOx+0x128>)
 80001ee:	695b      	ldr	r3, [r3, #20]
 80001f0:	4a42      	ldr	r2, [pc, #264]	; (80002fc <InitGPIOx+0x128>)
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f6:	6153      	str	r3, [r2, #20]
		switch(mode){
 80001f8:	78bb      	ldrb	r3, [r7, #2]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d002      	beq.n	8000204 <InitGPIOx+0x30>
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d01c      	beq.n	800023c <InitGPIOx+0x68>
			case OUTPUT:
				GPIOA->MODE_R |= (1U<<(pin*2));
				GPIOA->MODE_R &= ~(1U<<((pin*2)+1));
				break;
			default:
				break;
 8000202:	e075      	b.n	80002f0 <InitGPIOx+0x11c>
				GPIOA->MODE_R &= ~(1U<<(pin*2));
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	78fb      	ldrb	r3, [r7, #3]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	2101      	movs	r1, #1
 8000210:	fa01 f303 	lsl.w	r3, r1, r3
 8000214:	43db      	mvns	r3, r3
 8000216:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800021a:	4013      	ands	r3, r2
 800021c:	600b      	str	r3, [r1, #0]
				GPIOA->MODE_R &= ~(1U<<((pin*2)+1));
 800021e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	78fb      	ldrb	r3, [r7, #3]
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	3301      	adds	r3, #1
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	43db      	mvns	r3, r3
 8000232:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000236:	4013      	ands	r3, r2
 8000238:	600b      	str	r3, [r1, #0]
				break;
 800023a:	e059      	b.n	80002f0 <InitGPIOx+0x11c>
				GPIOA->MODE_R |= (1U<<(pin*2));
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000250:	4313      	orrs	r3, r2
 8000252:	600b      	str	r3, [r1, #0]
				GPIOA->MODE_R &= ~(1U<<((pin*2)+1));
 8000254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	78fb      	ldrb	r3, [r7, #3]
 800025c:	005b      	lsls	r3, r3, #1
 800025e:	3301      	adds	r3, #1
 8000260:	2101      	movs	r1, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800026c:	4013      	ands	r3, r2
 800026e:	600b      	str	r3, [r1, #0]
				break;
 8000270:	e03e      	b.n	80002f0 <InitGPIOx+0x11c>
			}
	}
	else if(gpio == GPIOB){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a22      	ldr	r2, [pc, #136]	; (8000300 <InitGPIOx+0x12c>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d13a      	bne.n	80002f0 <InitGPIOx+0x11c>
		RCC->RCC_AHBEN_R |= GPIOBEN;
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <InitGPIOx+0x128>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a1f      	ldr	r2, [pc, #124]	; (80002fc <InitGPIOx+0x128>)
 8000280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000284:	6153      	str	r3, [r2, #20]
		switch(mode){
 8000286:	78bb      	ldrb	r3, [r7, #2]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <InitGPIOx+0xbe>
 800028c:	2b01      	cmp	r3, #1
 800028e:	d018      	beq.n	80002c2 <InitGPIOx+0xee>
			case OUTPUT:
				GPIOB->MODE_R |= (1U<<(pin*2));
				GPIOB->MODE_R &= ~(1U<<((pin*2)+1));
				break;
			default:
				break;
 8000290:	e02e      	b.n	80002f0 <InitGPIOx+0x11c>
				GPIOB->MODE_R &= ~(1U<<(pin*2));
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <InitGPIOx+0x12c>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	78fb      	ldrb	r3, [r7, #3]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	2101      	movs	r1, #1
 800029c:	fa01 f303 	lsl.w	r3, r1, r3
 80002a0:	43db      	mvns	r3, r3
 80002a2:	4917      	ldr	r1, [pc, #92]	; (8000300 <InitGPIOx+0x12c>)
 80002a4:	4013      	ands	r3, r2
 80002a6:	600b      	str	r3, [r1, #0]
				GPIOB->MODE_R &= ~(1U<<((pin*2)+1));
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <InitGPIOx+0x12c>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	3301      	adds	r3, #1
 80002b2:	2101      	movs	r1, #1
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	4911      	ldr	r1, [pc, #68]	; (8000300 <InitGPIOx+0x12c>)
 80002bc:	4013      	ands	r3, r2
 80002be:	600b      	str	r3, [r1, #0]
				break;
 80002c0:	e016      	b.n	80002f0 <InitGPIOx+0x11c>
				GPIOB->MODE_R |= (1U<<(pin*2));
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <InitGPIOx+0x12c>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2101      	movs	r1, #1
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	490b      	ldr	r1, [pc, #44]	; (8000300 <InitGPIOx+0x12c>)
 80002d2:	4313      	orrs	r3, r2
 80002d4:	600b      	str	r3, [r1, #0]
				GPIOB->MODE_R &= ~(1U<<((pin*2)+1));
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <InitGPIOx+0x12c>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	78fb      	ldrb	r3, [r7, #3]
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	3301      	adds	r3, #1
 80002e0:	2101      	movs	r1, #1
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	4905      	ldr	r1, [pc, #20]	; (8000300 <InitGPIOx+0x12c>)
 80002ea:	4013      	ands	r3, r2
 80002ec:	600b      	str	r3, [r1, #0]
				break;
 80002ee:	bf00      	nop
		}
	}
	else{
	}
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000400 	.word	0x48000400

08000304 <WriteGPIOxPINx>:

void WriteGPIOxPINx(GPIOxTypeDef * GPIO, uint8_t pin, enum PIN_STATE state){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	4613      	mov	r3, r2
 8000312:	70bb      	strb	r3, [r7, #2]

	switch(state){
 8000314:	78bb      	ldrb	r3, [r7, #2]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d00b      	beq.n	8000332 <WriteGPIOxPINx+0x2e>
 800031a:	2b01      	cmp	r3, #1
 800031c:	d114      	bne.n	8000348 <WriteGPIOxPINx+0x44>
		case HIGH:
			GPIO->OD_R |= (1U<<pin);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	2101      	movs	r1, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	615a      	str	r2, [r3, #20]
			break;
 8000330:	e00b      	b.n	800034a <WriteGPIOxPINx+0x46>
		case LOW:
			GPIO->OD_R &= ~(1U<<pin);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	695a      	ldr	r2, [r3, #20]
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	2101      	movs	r1, #1
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	615a      	str	r2, [r3, #20]
			break;
 8000346:	e000      	b.n	800034a <WriteGPIOxPINx+0x46>
		default:
			break;
 8000348:	bf00      	nop
	}
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
	...

08000358 <main>:

#include"GPIO_DRIVER.h"


int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	InitGPIOx(GPIOB, 3, OUTPUT);
 800035e:	2201      	movs	r2, #1
 8000360:	2103      	movs	r1, #3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <main+0x50>)
 8000364:	f7ff ff36 	bl	80001d4 <InitGPIOx>

	while(1){
		WriteGPIOxPINx(GPIOB,3,HIGH);
 8000368:	2201      	movs	r2, #1
 800036a:	2103      	movs	r1, #3
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <main+0x50>)
 800036e:	f7ff ffc9 	bl	8000304 <WriteGPIOxPINx>
		for(int i=0;i<1000000;i++){}
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	e002      	b.n	800037e <main+0x26>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <main+0x54>)
 8000382:	4293      	cmp	r3, r2
 8000384:	ddf8      	ble.n	8000378 <main+0x20>
		WriteGPIOxPINx(GPIOB,3,LOW);
 8000386:	2200      	movs	r2, #0
 8000388:	2103      	movs	r1, #3
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <main+0x50>)
 800038c:	f7ff ffba 	bl	8000304 <WriteGPIOxPINx>
		for(int i=0;i<1000000;i++){}
 8000390:	2300      	movs	r3, #0
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	e002      	b.n	800039c <main+0x44>
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	3301      	adds	r3, #1
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	4a03      	ldr	r2, [pc, #12]	; (80003ac <main+0x54>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	ddf8      	ble.n	8000396 <main+0x3e>
		WriteGPIOxPINx(GPIOB,3,HIGH);
 80003a4:	e7e0      	b.n	8000368 <main+0x10>
 80003a6:	bf00      	nop
 80003a8:	48000400 	.word	0x48000400
 80003ac:	000f423f 	.word	0x000f423f

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	; (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ffb9 	bl	8000358 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	2000001c 	.word	0x2000001c

08000400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC1_2_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	; (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	; (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	; (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	; (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
